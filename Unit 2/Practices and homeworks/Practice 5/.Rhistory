dataset = read.csv('C:/Users/rjds_/Desktop/Data Mining/Unit 2/Practices and homeworks/Practice 5/heart.csv')
View(dataset)
head(dataset)
dataset$target = factor(dataset$target, levels = c(0, 1))
head(dataset)
library(caTools)
set.seed(55)
split = sample.split(dataset$Purchased, SplitRatio = 0.70)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# install.packages('caTools')
library(caTools)
set.seed(55)
split = sample.split(dataset$target, SplitRatio = 0.70)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(dataset)
training_set[-3] = scale(training_set[-3])
library(e1071)
classifier = svm(formula = target ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
svm
# Support Vector Machine (SVM)
# CSV from https://www.kaggle.com/ronitf/heart-disease-uci?select=heart.csv
# Importing the dataset
dataset = read.csv('C:/Users/rjds_/Desktop/Data Mining/Unit 2/Practices and homeworks/Practice 5/heart.csv')
head(dataset)
# Encoding the target feature as factor
dataset$target = factor(dataset$target, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(55)
split = sample.split(dataset$target, SplitRatio = 0.70)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting SVM to the Training set
library(e1071)
classifier = svm(formula = target ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
svm
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set)
y_pred
cm = table(test_set, y_pred)
cm
cm = table(test_set[-3], y_pred)
cm
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
y_pred
# Making the Confusion Matrix
cm = table(test_set[-3], y_pred)
cm
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(55)
split = sample.split(dataset$target, SplitRatio = 0.70)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Support Vector Machine (SVM)
# CSV from https://www.kaggle.com/ronitf/heart-disease-uci?select=heart.csv
# Importing the dataset
dataset = read.csv('C:/Users/rjds_/Desktop/Data Mining/Unit 2/Practices and homeworks/Practice 5/heart.csv')
head(dataset)
# Encoding the target feature as factor
dataset$target = factor(dataset$target, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(55)
split = sample.split(dataset$target, SplitRatio = 0.70)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting SVM to the Training set
library(e1071)
classifier = svm(formula = target ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
svm
View(test_set)
View(training_set)
View(test_set)
# Fitting SVM to the Training set
library(e1071)
classifier = svm(formula = target ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
svm
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set)
y_pred
cm <- table(test_set, y_pred)
cm
cm <- table(test_set$target, y_pred)
cm
# Making the Confusion Matrix
cm <- table(test_set$target, y_pred, dnn = c("Actual", "Predicha"))
cm
confusionMatrix(cm)
library('e1071')
library('ggplot2')
library('lattice')
library('caret')
confusionMatrix(cm)
# Visualising the Training set results
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
install.packages('ElemStatLearn')
install.packages("ElemStatLibrary")
# Visualising the Training set results
install.packages('Rtools')
install.packages('ElemStatLearn')
install.packages('ElemStatLearn')
