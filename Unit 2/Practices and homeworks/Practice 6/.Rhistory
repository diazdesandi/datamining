# Decision Tree Classification
# Importing the dataset
dataset = read.csv('C:/Users/rjds_/Desktop/Social_Network_Ads.csv')
dataset = dataset[3:5]
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
View(test_set)
View(training_set)
View(dataset)
library(rpart)
classifier = rpart(formula = Purchased ~ .,
data = training_set)
y_pred = predict(classifier, newdata = test_set[-3], type = 'class')
y_pred
cm = table(test_set[, 3], y_pred)
cm
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set, type = 'class')
plot(set[, -3],
main = 'Decision Tree Classification (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
View(dataset)
# Support Vector Machine (SVM)
# CSV from https://www.kaggle.com/ronitf/heart-disease-uci?select=heart.csv
#Libraries
library('lattice')
library('caret')
#install.packages("remotes")
#library(remotes)
#install_github("cran/ElemStatLearn")
library(ElemStatLearn)
# Importing the dataset
dataset = read.csv('C:/Users/rjds_/Desktop/Data Mining/Unit 2/Practices and homeworks/Practice 5/heart.csv')
# Encoding the target feature as factor
dataset$target = factor(dataset$target, levels = c(0, 1))
colnames(dataset)[1]  <- "age"
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(55)
split = sample.split(dataset$target, SplitRatio = 0.70)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting SVM to the Training set
library(e1071)
classifier = svm(formula = target ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
svm
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set)
y_pred
#print(paste(predict(classifier,newdata=test_set),test_set$target))
# Making the Confusion Matrix
cm <- table(test_set$target, y_pred, dnn = c("Actual", "Predicha"))
confusionMatrix(cm
View(dataset)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
y_grid = predict(classifier, newdata = grid_set, type ='class')
plot(set[, -3], main = 'SVM (Test set)',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
View(grid_set)
plot(set[, -3], main = 'SVM (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
y_grid = predict(classifier, newdata = grid_set, type ='class')
plot(set[, -3], main = 'SVM (Test set)',
title(xlab="Data", ylab="Density")
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
y_grid = predict(classifier, newdata = grid_set, type ='class')
plot(set[, -3], main = 'SVM (Test set)',
title(xlab="Data", ylab="Density"),
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
set = test_set
X1 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
X2 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
y_grid = predict(classifier, newdata = grid_set, type ='class')
plot(set[, -3], main = 'SVM (Test set)',
title(xlab="Data", ylab="Density"),
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Support Vector Machine (SVM)
# CSV from https://www.kaggle.com/ronitf/heart-disease-uci?select=heart.csv
#Libraries
library('lattice')
library('caret')
#install.packages("remotes")
#library(remotes)
#install_github("cran/ElemStatLearn")
library(ElemStatLearn)
# Importing the dataset
dataset = read.csv('C:/Users/rjds_/Desktop/Data Mining/Unit 2/Practices and homeworks/Practice 5/heart.csv')
# Encoding the target feature as factor
dataset$target = factor(dataset$target, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(55)
split = sample.split(dataset$target, SplitRatio = 0.70)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting SVM to the Training set
library(e1071)
classifier = svm(formula = target ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
svm
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set)
y_pred
#print(paste(predict(classifier,newdata=test_set),test_set$target))
# Making the Confusion Matrix
cm <- table(test_set$target, y_pred, dnn = c("Actual", "Predicha"))
confusionMatrix(cm)
set = test_set
X1 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
X2 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
y_grid = predict(classifier, newdata = grid_set, type ='class')
plot(set[, -3], main = 'SVM (Test set)',
title(xlab="Data", ylab="Density"),
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
test_set = subset(dataset, split == FALSE)
# Fitting SVM to the Training set
library(e1071)
classifier = svm(formula = target ~ age.,
data = training_set,
type = 'C-classification',
kernel = 'linear')
svm
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set)
y_pred
#print(paste(predict(classifier,newdata=test_set),test_set$target))
# Making the Confusion Matrix
cm <- table(test_set$target, y_pred, dnn = c("Actual", "Predicha"))
confusionMatrix(cm)
set = test_set
X1 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
X2 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
y_grid = predict(classifier, newdata = grid_set, type ='class')
plot(set[, -3], main = 'SVM (Test set)',
title(xlab="Data", ylab="Density"),
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Support Vector Machine (SVM)
# CSV from https://www.kaggle.com/ronitf/heart-disease-uci?select=heart.csv
#Libraries
library('lattice')
library('caret')
#install.packages("remotes")
#library(remotes)
#install_github("cran/ElemStatLearn")
library(ElemStatLearn)
# Importing the dataset
dataset = read.csv('C:/Users/rjds_/Desktop/Data Mining/Unit 2/Practices and homeworks/Practice 5/heart.csv')
# Encoding the target feature as factor
dataset$target = factor(dataset$target, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(55)
split = sample.split(dataset$target, SplitRatio = 0.70)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting SVM to the Training set
library(e1071)
classifier = svm(formula = target ~ Ã¯..age,
data = training_set,
type = 'C-classification',
kernel = 'linear')
svm
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set)
y_pred
#print(paste(predict(classifier,newdata=test_set),test_set$target))
# Making the Confusion Matrix
cm <- table(test_set$target, y_pred, dnn = c("Actual", "Predicha"))
confusionMatrix(cm)
set = test_set
X1 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
X2 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
y_grid = predict(classifier, newdata = grid_set, type ='class')
plot(set[, -3], main = 'SVM (Test set)',
title(xlab="Data", ylab="Density"),
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
View(dataset)
# Support Vector Machine (SVM)
# CSV from https://www.kaggle.com/ronitf/heart-disease-uci?select=heart.csv
#Libraries
library('lattice')
library('caret')
#install.packages("remotes")
#library(remotes)
#install_github("cran/ElemStatLearn")
library(ElemStatLearn)
# Importing the dataset
dataset = read.csv('C:/Users/rjds_/Desktop/Data Mining/Unit 2/Practices and homeworks/Practice 5/heart.csv')
# Encoding the target feature as factor
dataset$target = factor(dataset$target, levels = c(0, 1))
heart <- dataset[,c(1,2,13)]
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(55)
split = sample.split(dataset$target, SplitRatio = 0.70)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting SVM to the Training set
library(e1071)
classifier = svm(formula = target ~ Ã¯..age,
data = training_set,
type = 'C-classification',
kernel = 'linear')
svm
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set)
y_pred
#print(paste(predict(classifier,newdata=test_set),test_set$target))
# Making the Confusion Matrix
cm <- table(test_set$target, y_pred, dnn = c("Actual", "Predicha"))
confusionMatrix(cm)
set = test_set
X1 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
X2 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
y_grid = predict(classifier, newdata = grid_set, type ='class')
plot(set[, -3], main = 'SVM (Test set)',
title(xlab="Data", ylab="Density"),
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Support Vector Machine (SVM)
# CSV from https://www.kaggle.com/ronitf/heart-disease-uci?select=heart.csv
#Libraries
library('lattice')
library('caret')
#install.packages("remotes")
#library(remotes)
#install_github("cran/ElemStatLearn")
library(ElemStatLearn)
# Importing the dataset
dataset = read.csv('C:/Users/rjds_/Desktop/Data Mining/Unit 2/Practices and homeworks/Practice 5/heart.csv')
# Encoding the target feature as factor
dataset$target = factor(dataset$target, levels = c(0, 1))
heart <- dataset[,c(1,2,13)]
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(55)
split = sample.split(heart$target, SplitRatio = 0.70)
training_set = subset(heart, split == TRUE)
test_set = subset(heart, split == FALSE)
# Fitting SVM to the Training set
library(e1071)
classifier = svm(formula = target ~ Ã¯..age,
data = training_set,
type = 'C-classification',
kernel = 'linear')
svm
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set)
y_pred
#print(paste(predict(classifier,newdata=test_set),test_set$target))
# Making the Confusion Matrix
cm <- table(test_set$target, y_pred, dnn = c("Actual", "Predicha"))
confusionMatrix(cm)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
y_grid = predict(classifier, newdata = grid_set, type ='class')
plot(set[, -3], main = 'SVM (Test set)',
title(xlab="Data", ylab="Density"),
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Ã¯..age', 'sex')
y_grid = predict(classifier, newdata = grid_set, type ='class')
plot(set[, -3], main = 'SVM (Test set)',
title(xlab="Data", ylab="Density"),
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Ã¯..age', 'sex')
y_grid = predict(classifier, newdata = grid_set, type ='class')
plot(set[, -3], main = 'SVM (Test set)',
title(xlab="Age", ylab="Sex"),
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
